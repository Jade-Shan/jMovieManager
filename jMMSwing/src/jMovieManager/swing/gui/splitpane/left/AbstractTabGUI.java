/**
 * Copyright (c) 2010-2015 Bryan Beck.
 * All rights reserved.
 * 
 * This project is licensed under LGPL v2.1.
 * See jMovieManager-license.txt for details.
 * 
 */
package jMovieManager.swing.gui.splitpane.left;

import jMovieManager.swing.gui.createmedia.CreateSerieGUI;
import java.awt.Frame;
import java.util.Locale;
import java.util.Observable;
import java.util.Observer;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import jmm.data.collection.MediaCollection;
import jmm.interfaces.FileTypeInterface;
import jmm.utils.LocaleManager;
import org.hibernate.annotations.common.util.impl.LoggerFactory;
import org.jboss.logging.Logger;

/**
 * Abstract Panel for all Tab GUIs
 * 
 * @author Bryan Beck
 * @since 28.08.2012
 */
public abstract class AbstractTabGUI extends javax.swing.JPanel implements Observer, FileTypeInterface{
    /** Logger. */
    private static final Logger LOG = LoggerFactory.logger(AbstractTabGUI.class);
    
    protected ResourceBundle bundle;
    
    private final MediaType kindOfTab;
    protected MediaCollection collection;
    private boolean searchTab;
    
    /**
     * Creates new form AbstractTabGUI
     * @param collection the MediaCollection related to this tab
     * @param tabKind the kind of the tab
     * @param searchTab if true, the tab is not editable
     */
    protected AbstractTabGUI(MediaCollection collection, MediaType tabKind, boolean searchTab) {
        initComponents();
        this.collection = collection;
        this.kindOfTab = tabKind; 
        this.searchTab = searchTab;
        bundle = ResourceBundle.getBundle("jMovieManager.swing.resources.MovieManager"); 
        collection.addObserver(this);
        this.setName(collection.getName());
        getTabPanel().setName(collection.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setAlignmentY(0.0F);
        setPreferredSize(new java.awt.Dimension(260, 700));

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 32767));
        jPanel1.setPreferredSize(new java.awt.Dimension(260, 700));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
       
    
       /**
    * Observer method for locale update <br/>
    * Updates all localized GUI elements
    * 
    * @param o the observerable object
    * @param arg the updated locale
    */
   @Override
    public void update(Observable o, Object arg) {
       if(arg instanceof Locale){
           bundle = ResourceBundle.getBundle("jMovieManager.swing.resources.MovieManager"); 
           JOptionPane.setDefaultLocale(LocaleManager.getInstance().getCurrentLocale());
       }
    }
   
    /**
     * @return the collection
     */
    public MediaCollection<?> getCollection() {
        return collection;
    }

    /**
     * sets the collection related to the tab and updates all GUI values
     * @param collection the collection to set
     */
    public void setCollection(MediaCollection collection) {
        this.collection = collection;
        updateTabValues();
    }
     
    /**
     * @return the kindOfTab
     */
    public MediaType getKindOfTab() {
        return kindOfTab;
    }
    /**
     * @return the panel for the tab
     */   
    public final JPanel getTabPanel(){
        return jPanel1;
    }   

    /**
     * @return the searchTab
     */
    public boolean isSearchTab() {
        return searchTab;
    }
    
    /**
    * Clears the list or tree and inserts all collection elements
    */  
    public abstract void updateTabValues();
    
    /**
    * Select the <b>first</b> index which matches with the given partialName.<br/>
    * Requiered for simple search
    * @param partialName the partial name to look for
    */
    public abstract void setSelectedValue(String partialName);
    
    /**
     * removes the selected mediaFile from the GUI
     */
    public abstract void removeSelectedValue();
    
    /**
    * Clears the selection. 
    */
    public abstract void clearSelection();
    
     /**
     * Creates a new dialog to edit a mediaFile.<br/>
     * The selected value will be edited.
     * 
     * @param parent the parent frame
     * 
     */
    public abstract void createUpdateSelectedMediaFileDialog(Frame parent);
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
