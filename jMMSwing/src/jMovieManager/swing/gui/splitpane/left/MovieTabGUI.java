/**
 * Copyright (c) 2010-2015 Bryan Beck.
 * All rights reserved.
 * 
 * This project is licensed under LGPL v2.1.
 * See jMovieManager-license.txt for details.
 * 
 */
package jMovieManager.swing.gui.splitpane.left;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Frame;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetAdapter;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.text.Position;
import jmm.data.Movie;
import jmm.data.collection.MovieCollection;
import jmm.data.DataManager;
import jmm.data.collection.CollectionManager;
import jMovieManager.swing.gui.ImportDirectoryGUI;
import jMovieManager.swing.gui.MovieManagerGUI;
import jMovieManager.swing.gui.createmedia.CreateMovieGUI;
import jMovieManager.swing.gui.other.MyListCellRenderer;
import jMovieManager.swing.gui.splitpane.right.MovieDetailGUI;
import java.awt.Cursor;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import jmm.utils.OperatingSystem;
import org.hibernate.annotations.common.util.impl.LoggerFactory;
import org.jboss.logging.Logger;

/**
 * Movie List Panel for all Tab GUIs
 * 
 * @author Bryan Beck
 * @since 28.08.2012
 */
public class MovieTabGUI extends AbstractTabGUI {  
    /** Logger. */
    private static final Logger LOG = LoggerFactory.logger(MovieTabGUI.class);
    
    private DefaultListModel listData; 
    private MyListCellRenderer listCellRenderer;
    
    //required to dynamically update watched movie state
    private Object currentMouseOver = new Object();
    private Object previousMouseOver = new Object();
    private int previousIndex = -1;
    private Boolean previousWatched;
    
    /**
     * Creates new form MovieTabGUI
     * @param collection the MovieCollection related to this tab
     * @param searchTab if true, the tab is not editable
     */
    public MovieTabGUI(MovieCollection collection, boolean searchTab) {
        super(collection, MediaType.MOVIE, searchTab);
        listData = new DefaultListModel();
        listCellRenderer = new MyListCellRenderer();
        initComponents();

        //File Drop f√ºr jListe, zum automatischen Import
        if(OperatingSystem.isWindowsPlatform()){
            initJListFileDropOnWindows();
        }
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = super.getTabPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel1.setPreferredSize(new java.awt.Dimension(260, 700));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setMinimumSize(new java.awt.Dimension(230, 0));
        jScrollPane1.setOpaque(false);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(260, 700));

        jList1.setModel(listData);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(listCellRenderer);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jList1MouseMoved(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jList1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1);

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * jList1MouseClicked - Double Click Edit <br/>
     * Edits the current selected list value
     * @param evt the triggered event
     */
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        int x = evt.getX();
        if((evt.getClickCount() > 1) && (this.getSelectedValue() != null)){
            this.createUpdateSelectedMediaFileDialog(MovieManagerGUI.getInstance());
        }
        else if(x < 20){ //16
            //Determine if the watched icon was clicked
            int listIndex = jList1.getSelectedIndex();
            if(listIndex > -1){
                Movie selMovie = (Movie)listData.getElementAt(listIndex);
                selMovie.setWatched(!previousWatched);
                //Update specific list item
                listData.setElementAt(selMovie, listIndex);
                //reset watched state
                previousWatched = selMovie.isWatched();
                evt.consume();
            }
        } 
    }//GEN-LAST:event_jList1MouseClicked

     /**
     * jList1ValueChanged - Updates the displayed movie<br/>
     * Updates the displayed movie on the main GUI to the selected one
     * @param evt the triggered event
     */
    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        //initialize center border element
        if(!evt.getValueIsAdjusting()){
            JPanel rightSplitPane = MovieManagerGUI.getInstance().getRightSplitPane();
            BorderLayout layout = (BorderLayout) rightSplitPane.getLayout();
            Component centerComponent = layout.getLayoutComponent(BorderLayout.CENTER);
            MovieDetailGUI mdInstance = MovieDetailGUI.getInstance();
            if(this.getSelectedValue() != null){
                if(centerComponent == null){
                    rightSplitPane.add(mdInstance.getRootPanel(), BorderLayout.CENTER);
                }
                else if(!centerComponent.equals(mdInstance.getRootPanel())){
                    rightSplitPane.remove(centerComponent);
                    rightSplitPane.add(mdInstance.getRootPanel(), BorderLayout.CENTER);
                }

                Object movie = this.getSelectedValue();
                if(movie != null){
                    //aktualisiere GUI
                    mdInstance.updateMovieDetail((Movie)movie);
                    MovieManagerGUI.getInstance().updateEnabledGUIElements();   
                }
            }else{
                if((centerComponent != null) && (centerComponent.equals(MovieDetailGUI.getInstance().getRootPanel()))){
                    rightSplitPane.remove(centerComponent);
                }
            }
            rightSplitPane.repaint();
        }
    }//GEN-LAST:event_jList1ValueChanged

     /**
     * jList1KeyTyped - Delete selected Value <br/>
     * Checks if the delete button is pressed and deletes the selected value
     * @param evt the triggered event
     */
    private void jList1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyTyped
        if((evt.getKeyChar() == KeyEvent.VK_DELETE) && (getSelectedValue() != null)){         
            int confirm = javax.swing.JOptionPane.showConfirmDialog(this,
                    bundle.getString("MovieTabGUI.confirmDelete.text"),
                    bundle.getString("MovieTabGUI.confirmDelete.headline"),
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);      
            if(confirm == 0){
                this.removeSelectedValue();
            }
        }
    }//GEN-LAST:event_jList1KeyTyped

    /**
     * jList1 - get item on mouse position<br/>
     * Determines the listitem on the mouse position
     * @param evt The triggered event
     */
    private void jList1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseMoved
        int listIndex = jList1.locationToIndex(evt.getPoint());
        int x = evt.getX();
        if((listIndex > -1) && (x < 20)){
            this.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            currentMouseOver = listData.getElementAt(listIndex);
            if(!previousMouseOver.equals(currentMouseOver)){
                //restore icon of the previousMouseOver Label
                if(previousMouseOver instanceof Movie){
                    ((Movie)previousMouseOver).setWatched(previousWatched);
                }
                previousWatched = ((Movie)currentMouseOver).isWatched();
                ((Movie)currentMouseOver).setWatched(true);
                //Update specific list item
                listData.setElementAt(currentMouseOver, listIndex);
                previousMouseOver = currentMouseOver;
                previousIndex = listIndex;
            }
        }else if(previousIndex > -1){
            if(previousMouseOver instanceof Movie){
                ((Movie)previousMouseOver).setWatched(previousWatched);
                //This happens if the previously element was deleted and the listData vector has changed
                if(listData.getSize() > previousIndex){
                    //Update specific list item
                    listData.setElementAt(previousMouseOver, previousIndex);
                }
            }
            previousIndex = -1;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_jList1MouseMoved

    /**
     * @return the collection
     */
    @Override
    public MovieCollection getCollection() {
        return (MovieCollection)collection;
    }
    
     /**
     * Creates a new dialog to edit a mediaFile.<br/>
     * The selected value will be edited.
     * 
     * @param parent the parent frame
     * 
     */
    @Override
    public void createUpdateSelectedMediaFileDialog(Frame parent){
        Object movie = this.getSelectedValue();
        if((movie != null) && (!collection.isSearchCollection())){
            Movie oldMovie = (Movie)movie;
            CreateMovieGUI updateMovieGUI = new CreateMovieGUI(parent, true, oldMovie, getCollection(), true);
            Movie newMovie = updateMovieGUI.showGUI();
            if(newMovie != null){
                //TODO: Wenn neue Sammlung -> Tab wechseln
                this.updateMovieInGUI(oldMovie, newMovie);
                MovieDetailGUI.getInstance().updateMovieDetail(newMovie);
            }     
        }
    }
    
   /**
    * @see Observer#update(java.util.Observable, java.lang.Object) 
    */
    @Override
    public void update(Observable o, Object arg) {
        super.update(o, arg);
        if(arg == null){
            //ordering has changed, full update
            updateTabValues();
        }
        else if(arg instanceof Movie){
            Movie movie = (Movie)arg;
            if(!listData.contains(movie)){
                this.addMovieToGUI(movie);
            }else{
                this.removeMovieFromGUI(movie);
            }
        }
    }  
    
    /**
     * removes the selected movie from the collection
     * and the list
     */
    @Override
    public void removeSelectedValue(){
        Object movie = this.getSelectedValue();
        if((movie != null) && (!collection.isSearchCollection())){
            DataManager.INSTANCE.removeMovie((MovieCollection)collection, movie.toString());
        }
    }
    
   
    @Override
   public void setSelectedValue(String partialName){
        if(!listData.isEmpty()){
            int matchIndex = getNextMatch(partialName, 0, Position.Bias.Forward);       
            if(matchIndex != -1){
                jList1.setSelectedIndex(matchIndex);
                //Scrollt zum ausgew√§hlten Index
                jList1.ensureIndexIsVisible(matchIndex);
            }
        }
   }
   
    /**
     * Returns the next list element whose {@code toString} value
     * contains the given partialName.
     *
     * @param partialName the string to test for a match
     * @param startIndex the index for starting the search
     * @param bias the search direction, either
     * Position.Bias.Forward or Position.Bias.Backward.
     * @return the index of the next list element that
     * starts with the prefix; otherwise {@code -1}
     * @exception IllegalArgumentException if prefix is {@code null}
     * or startIndex is out of bounds
     */
   private int getNextMatch(String partialName, int startIndex, Position.Bias bias) {
        ListModel model = jList1.getModel();
        int max = model.getSize();
        if (partialName == null) {
            throw new IllegalArgumentException();
        }
        if (startIndex < 0 || startIndex >= max) {
            throw new IllegalArgumentException();
        }
        partialName = partialName.toUpperCase();

        // start search from the next element after the selected element
        int increment = (bias == Position.Bias.Forward) ? 1 : -1;
        int index = startIndex;
        do {
            Object element = model.getElementAt(index);

            if (element != null) {
                String string;

                if (element instanceof String) {
                    string = ((String)element).toUpperCase();
                }
                else {
                    string = element.toString();
                    if (string != null) {
                        string = string.toUpperCase();
                    }
                }

                if (string != null && string.contains(partialName)) {
                    return index;
                }
            }
            index = (index + increment + max) % max;
        } while (index != startIndex);
        return -1;
    }
   
   /**
    * Returns the currently selected movie.
    * 
    * @return The selected movie<br/> null, if no entry is selected
    */
   public Object getSelectedValue(){
       return jList1.getSelectedValue();
   }
   
   /**
    * Removes all values from the list. <br/>
    * Inserts all collection elements in the list. <br/>
    * This method will be performed asynchronly in another thread after all tasks in the EventDispatchThread.
   */
    @Override
   public void updateTabValues(){
        if((collection != null) && (!collection.isEmpty())){
            final Object movie = this.getSelectedValue();
           Runnable actualizeGUI = new Runnable() {
                @Override
                public void run() {
                    //delete all elements
                    listData.clear();
                    //insert all elements
                    for(int i = 0; i < collection.size(); i ++){
                        update(null, collection.get(i));
                    }
                    //select the previously selected
                    if(movie != null){
                        jList1.setSelectedValue(movie, true);
                    }
                }
            };
            SwingUtilities.invokeLater(actualizeGUI);                
       }
   }
      
    /**
    * Update an entry on the GUI
    *
    * @param oldMovie The old movie
    * @param newMovie The updated movie
    */
   public void updateMovieInGUI(Movie oldMovie, Movie newMovie){
//       MediaFile movie = collection.get(oldTitle);
       int index = listData.indexOf(oldMovie);
       if(index > -1){
           listData.setElementAt(newMovie, index);
       }
   }
   
   /**
    * Removes a movie from the GUI
    * 
    * @param oldMovie The movie to remove
    */
   private boolean removeMovieFromGUI(final Movie oldMovie){       
       return listData.removeElement(oldMovie);      
   }
      
  /**
    * Adds a movie to the GUI<br/>
    * 
    * @param movie the movie to add
    */
   private synchronized void addMovieToGUI(final Movie movie){
       listData.addElement(movie);
   }
   
   /**
   * Initialisiert Drop auf Windows
   * @see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4899516
   */  
   private void initJListFileDropOnWindows(){
       DropTarget target = new DropTarget(jList1, new DropTargetAdapter() {
           @Override
           public void drop(DropTargetDropEvent dtde) {
               if(dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)){
                   dtde.acceptDrop(dtde.getDropAction());
                   try {
                       //siehe: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4899516
                       final List<File> list = (List<File>) dtde.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                       //Hier steht der eigentliche Drop Code
                       if(CollectionManager.INSTANCE.isACollectionCreated()){
                           //ImportGUI im extra Thread, damit durch den Import Prozess keine Verz√∂gerungen auftreten                     
                           Runnable runImport = new Runnable() {
                               @Override
                               public void run() {                           
                                    ImportDirectoryGUI fileImport = new ImportDirectoryGUI(
                                            MovieManagerGUI.getInstance(), 
                                            true, 
                                            MovieManagerGUI.getInstance().getTabNames(),
                                            list,
                                            collection);
                                    fileImport.showGUI();                           
                               } 
                           };
                           SwingUtilities.invokeLater(runImport);
                       }
                   } 
                   catch (UnsupportedFlavorException | IOException ex) {
                       LOG.error("Error while dropping file into MovieList.", ex);
                   }                  
               }
           }
        });
        jList1.setDropTarget(target);
   }   
   
   /**
    * @see JList#clearSelection() 
    */
    @Override
   public void clearSelection(){
        jList1.clearSelection();
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
